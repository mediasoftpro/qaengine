@model Jugnoon.qa.Models.AnsViewModel
@inject IStringLocalizer<GeneralResource> GeneralResource
@inject IStringLocalizer<qaResource> qaResource
@using  Jugnoon.qa
@inject Jugnoon.Framework.ApplicationDbContext _context
@inject Microsoft.Extensions.Options.IOptions<Jugnoon.Settings.Registration> registrationSettings
@{
    var PostUrl = QAUrls.Prepare_QA_Url(Model.Qid, Model.Title, "");
    var LoginUrl = Config.GetUrl("login?ReturnUrl=" + PostUrl);

    if (Model.Answers > 0)
    {
        <hr />
        <h2 class="m-t-10 m-b-10">
            @Model.Answers @qaResource["_answers"].Value
        </h2>
        <hr />
        if (Model.Answers > 0)
        {
            var _lst = QAnswersBLL.Fetch_Answers(_context, Model.Qid).Result;
            if (_lst.Count > 0)
            {
                foreach (var Item in _lst)
                {
                    // Answer List Design
                    string _box_csss = "";
                    if (Item.isanswer == 1)
                    {
                        _box_csss = "box-active";
                    }
                    else
                    {
                        _box_csss = "";
                    }
                    string _desc = UGeneral.Prepare_Description(Item.description, 0);

                    <div id="act_@Item.id" class="box m-b-10 @_box_csss ansitem">

                        <div class="row">

                            <div class="col-md-12">

                                @if (Item.isanswer == 1)
                                {
                                    <span class="label label-success m-t-5 float-right">
                                        @qaResource["_best_answer"].Value
                                    </span>
                                }

                                <div class="m-b-5">
                                    @Html.Raw(_desc)
                                </div>
                                <p class="m-b-5">
                                    @qaResource["_answered"].Value: <strong>@UtilityBLL.Generate_Date(Item.created_at, 2)</strong> by
                                    <a href="@UserUrlConfig.ProfileUrl(Item.author,registrationSettings.Value.uniqueFieldOption)">@UserBLL.prepareUserName(Item.author)</a>
                                </p>

                            </div>
                        </div>


                    </div>
                    var ANSViewPath = "~/Views/themes/" + SiteConfiguration.Theme + "/question/partials/_ansection.cshtml";
                    @await Html.PartialAsync(ANSViewPath, new Jugnoon.qa.Models.AnswerActionViewModel()
                   {
                       ContentID = Item.id,
                       Votes = Item.votes,
                       Answers = Model.Answers,
                       isAnswer = Item.isanswer,
                       UserName = Item.userid, // author of answer
                       Author_UserName = Model.Authorusername, // author of question
                       Qid = Model.Qid,
                       Type = 1, // 0: question, 1: answer
                       isResolved = Model.isresolved
                   })
                }
            }
        }
    }
}


